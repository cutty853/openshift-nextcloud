apiVersion: v1
kind: Template
metadata:
  name: nextcloud
  annotations:
    description: "Nextcloud - A safe home for all your data"
    tags: "fileshare,nextcloud"
iconClass: fa-cloud-upload
parameters:
- name: APPLICATION_NAME
  description: The name of the application (will also be the access subdomain)
  value: nextcloud
- name: NEXTCLOUD_IMAGE_REPO
  description: Nextcloud image git repository
  value: https://github.com/cutty853/openshift-nextcloud/
- name: PVC_SIZE
  description: Nextcloud Persistent Volume size
  value: 5Gi

objects:
# Persistent volume for the nextcloud containers
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-data
    labels:
      app: ${APPLICATION_NAME}
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${PVC_SIZE}

# Preparing the output for the build config
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: nextcloud
    labels:
      template: nextcloud
  spec:
    lookupPolicy:
      local: true
    tags:
    - name: latest

# Building nextcloud docker image
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: nextcloud
    labels:
      app: ${APPLICATION_NAME}
  spec:
    source:
      git:
        uri: ${NEXTCLOUD_IMAGE_REPO}
    strategy:
      dockerStrategy:
        from:
            kind: DockerImage
            name: nextcloud:latest
        forcePull: true
    output:
      to:
        kind: ImageStreamTag
        name: nextcloud:latest
    triggers:
    - type: ConfigChange
# Deployment config for the nextcloud pod
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    template: 
      metadata:
        labels:
          name: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
          - name: nextcloud
            image: nextcloud
            ports:
              - containerPort: 8080
                protocol: "TCP"
            # TODO: Voir si ces variables servent vraiment lors de l'installation et si elle devrait pas plutot etre 
            # comme Ã§a https://github.com/nextcloud/docker/issues/420
            env:
            - name: NC_dbhost
              value: mariadb
            # - name: NC_dbuser
            #   valueFrom:
            #     secretKeyRef:
            #       key: database-user
            #       name: mariadb
            # - name: NC_dbpassword
            #   valueFrom:
            #     secretKeyRef:
            #       key: database-password
            #       name: mariadb
            - name: NC_dbname
              value: nextcloud
            volumeMounts:
            - name: ${APPLICATION_NAME}-source
              mountPath: /var/www/html
            - name: ${APPLICATION_NAME}-data
              subPath: data
              mountPath: /var/www/html/data
            - name: ${APPLICATION_NAME}-data
              subPath: config
              mountPath: /var/www/html/config
            - name: ${APPLICATION_NAME}-data
              subPath: apps
              mountPath: /var/www/html/custom_apps
        volumes:
        - name: ${APPLICATION_NAME}-source
          emptyDir: {}
        - name: ${APPLICATION_NAME}-data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-data
    replicas: 1
    strategy:
      type: Rolling
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - nextcloud
          from:
            kind: ImageStreamTag
            name: nextcloud:latest
# Service for the nextcloud application
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}
# Route for the nextcloud application
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    host: ${APPLICATION_NAME}.openshift.genome.ulaval.ca
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}